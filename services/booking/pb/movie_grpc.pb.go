// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pb/movie.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieServiceClient interface {
	GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*GetMoviesResponse, error)
	GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResponse, error)
	CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error)
	UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error)
	DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error)
}

type movieServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieServiceClient(cc grpc.ClientConnInterface) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) GetMovies(ctx context.Context, in *GetMoviesRequest, opts ...grpc.CallOption) (*GetMoviesResponse, error) {
	out := new(GetMoviesResponse)
	err := c.cc.Invoke(ctx, "/MovieService/GetMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) GetMovie(ctx context.Context, in *GetMovieRequest, opts ...grpc.CallOption) (*GetMovieResponse, error) {
	out := new(GetMovieResponse)
	err := c.cc.Invoke(ctx, "/MovieService/GetMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) CreateMovie(ctx context.Context, in *CreateMovieRequest, opts ...grpc.CallOption) (*CreateMovieResponse, error) {
	out := new(CreateMovieResponse)
	err := c.cc.Invoke(ctx, "/MovieService/CreateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) UpdateMovie(ctx context.Context, in *UpdateMovieRequest, opts ...grpc.CallOption) (*UpdateMovieResponse, error) {
	out := new(UpdateMovieResponse)
	err := c.cc.Invoke(ctx, "/MovieService/UpdateMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieServiceClient) DeleteMovie(ctx context.Context, in *DeleteMovieRequest, opts ...grpc.CallOption) (*DeleteMovieResponse, error) {
	out := new(DeleteMovieResponse)
	err := c.cc.Invoke(ctx, "/MovieService/DeleteMovie", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
// All implementations must embed UnimplementedMovieServiceServer
// for forward compatibility
type MovieServiceServer interface {
	GetMovies(context.Context, *GetMoviesRequest) (*GetMoviesResponse, error)
	GetMovie(context.Context, *GetMovieRequest) (*GetMovieResponse, error)
	CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error)
	UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error)
	DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error)
	mustEmbedUnimplementedMovieServiceServer()
}

// UnimplementedMovieServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieServiceServer struct {
}

func (UnimplementedMovieServiceServer) GetMovies(context.Context, *GetMoviesRequest) (*GetMoviesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovies not implemented")
}
func (UnimplementedMovieServiceServer) GetMovie(context.Context, *GetMovieRequest) (*GetMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovie not implemented")
}
func (UnimplementedMovieServiceServer) CreateMovie(context.Context, *CreateMovieRequest) (*CreateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMovie not implemented")
}
func (UnimplementedMovieServiceServer) UpdateMovie(context.Context, *UpdateMovieRequest) (*UpdateMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovie not implemented")
}
func (UnimplementedMovieServiceServer) DeleteMovie(context.Context, *DeleteMovieRequest) (*DeleteMovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMovie not implemented")
}
func (UnimplementedMovieServiceServer) mustEmbedUnimplementedMovieServiceServer() {}

// UnsafeMovieServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieServiceServer will
// result in compilation errors.
type UnsafeMovieServiceServer interface {
	mustEmbedUnimplementedMovieServiceServer()
}

func RegisterMovieServiceServer(s grpc.ServiceRegistrar, srv MovieServiceServer) {
	s.RegisterService(&MovieService_ServiceDesc, srv)
}

func _MovieService_GetMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMoviesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieService/GetMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovies(ctx, req.(*GetMoviesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_GetMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieService/GetMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetMovie(ctx, req.(*GetMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_CreateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).CreateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieService/CreateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).CreateMovie(ctx, req.(*CreateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_UpdateMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).UpdateMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieService/UpdateMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).UpdateMovie(ctx, req.(*UpdateMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieService_DeleteMovie_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).DeleteMovie(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MovieService/DeleteMovie",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).DeleteMovie(ctx, req.(*DeleteMovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieService_ServiceDesc is the grpc.ServiceDesc for MovieService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMovies",
			Handler:    _MovieService_GetMovies_Handler,
		},
		{
			MethodName: "GetMovie",
			Handler:    _MovieService_GetMovie_Handler,
		},
		{
			MethodName: "CreateMovie",
			Handler:    _MovieService_CreateMovie_Handler,
		},
		{
			MethodName: "UpdateMovie",
			Handler:    _MovieService_UpdateMovie_Handler,
		},
		{
			MethodName: "DeleteMovie",
			Handler:    _MovieService_DeleteMovie_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/movie.proto",
}

// DirectorServiceClient is the client API for DirectorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DirectorServiceClient interface {
	GetDirectors(ctx context.Context, in *GetDirectorsRequest, opts ...grpc.CallOption) (*GetDirectorsResponse, error)
	GetDirector(ctx context.Context, in *GetDirectorRequest, opts ...grpc.CallOption) (*GetDirectorResponse, error)
	CreateDirector(ctx context.Context, in *CreateDirectorRequest, opts ...grpc.CallOption) (*CreateDirectorResponse, error)
	UpdateDirector(ctx context.Context, in *UpdateDirectorRequest, opts ...grpc.CallOption) (*UpdateDirectorResponse, error)
	DeleteDirector(ctx context.Context, in *DeleteDirectorRequest, opts ...grpc.CallOption) (*DeleteDirectorResponse, error)
}

type directorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDirectorServiceClient(cc grpc.ClientConnInterface) DirectorServiceClient {
	return &directorServiceClient{cc}
}

func (c *directorServiceClient) GetDirectors(ctx context.Context, in *GetDirectorsRequest, opts ...grpc.CallOption) (*GetDirectorsResponse, error) {
	out := new(GetDirectorsResponse)
	err := c.cc.Invoke(ctx, "/DirectorService/GetDirectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorServiceClient) GetDirector(ctx context.Context, in *GetDirectorRequest, opts ...grpc.CallOption) (*GetDirectorResponse, error) {
	out := new(GetDirectorResponse)
	err := c.cc.Invoke(ctx, "/DirectorService/GetDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorServiceClient) CreateDirector(ctx context.Context, in *CreateDirectorRequest, opts ...grpc.CallOption) (*CreateDirectorResponse, error) {
	out := new(CreateDirectorResponse)
	err := c.cc.Invoke(ctx, "/DirectorService/CreateDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorServiceClient) UpdateDirector(ctx context.Context, in *UpdateDirectorRequest, opts ...grpc.CallOption) (*UpdateDirectorResponse, error) {
	out := new(UpdateDirectorResponse)
	err := c.cc.Invoke(ctx, "/DirectorService/UpdateDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *directorServiceClient) DeleteDirector(ctx context.Context, in *DeleteDirectorRequest, opts ...grpc.CallOption) (*DeleteDirectorResponse, error) {
	out := new(DeleteDirectorResponse)
	err := c.cc.Invoke(ctx, "/DirectorService/DeleteDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DirectorServiceServer is the server API for DirectorService service.
// All implementations must embed UnimplementedDirectorServiceServer
// for forward compatibility
type DirectorServiceServer interface {
	GetDirectors(context.Context, *GetDirectorsRequest) (*GetDirectorsResponse, error)
	GetDirector(context.Context, *GetDirectorRequest) (*GetDirectorResponse, error)
	CreateDirector(context.Context, *CreateDirectorRequest) (*CreateDirectorResponse, error)
	UpdateDirector(context.Context, *UpdateDirectorRequest) (*UpdateDirectorResponse, error)
	DeleteDirector(context.Context, *DeleteDirectorRequest) (*DeleteDirectorResponse, error)
	mustEmbedUnimplementedDirectorServiceServer()
}

// UnimplementedDirectorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDirectorServiceServer struct {
}

func (UnimplementedDirectorServiceServer) GetDirectors(context.Context, *GetDirectorsRequest) (*GetDirectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectors not implemented")
}
func (UnimplementedDirectorServiceServer) GetDirector(context.Context, *GetDirectorRequest) (*GetDirectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirector not implemented")
}
func (UnimplementedDirectorServiceServer) CreateDirector(context.Context, *CreateDirectorRequest) (*CreateDirectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDirector not implemented")
}
func (UnimplementedDirectorServiceServer) UpdateDirector(context.Context, *UpdateDirectorRequest) (*UpdateDirectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirector not implemented")
}
func (UnimplementedDirectorServiceServer) DeleteDirector(context.Context, *DeleteDirectorRequest) (*DeleteDirectorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDirector not implemented")
}
func (UnimplementedDirectorServiceServer) mustEmbedUnimplementedDirectorServiceServer() {}

// UnsafeDirectorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DirectorServiceServer will
// result in compilation errors.
type UnsafeDirectorServiceServer interface {
	mustEmbedUnimplementedDirectorServiceServer()
}

func RegisterDirectorServiceServer(s grpc.ServiceRegistrar, srv DirectorServiceServer) {
	s.RegisterService(&DirectorService_ServiceDesc, srv)
}

func _DirectorService_GetDirectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).GetDirectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectorService/GetDirectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).GetDirectors(ctx, req.(*GetDirectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorService_GetDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).GetDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectorService/GetDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).GetDirector(ctx, req.(*GetDirectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorService_CreateDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDirectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).CreateDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectorService/CreateDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).CreateDirector(ctx, req.(*CreateDirectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorService_UpdateDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDirectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).UpdateDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectorService/UpdateDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).UpdateDirector(ctx, req.(*UpdateDirectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DirectorService_DeleteDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDirectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DirectorServiceServer).DeleteDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DirectorService/DeleteDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DirectorServiceServer).DeleteDirector(ctx, req.(*DeleteDirectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DirectorService_ServiceDesc is the grpc.ServiceDesc for DirectorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DirectorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DirectorService",
	HandlerType: (*DirectorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDirectors",
			Handler:    _DirectorService_GetDirectors_Handler,
		},
		{
			MethodName: "GetDirector",
			Handler:    _DirectorService_GetDirector_Handler,
		},
		{
			MethodName: "CreateDirector",
			Handler:    _DirectorService_CreateDirector_Handler,
		},
		{
			MethodName: "UpdateDirector",
			Handler:    _DirectorService_UpdateDirector_Handler,
		},
		{
			MethodName: "DeleteDirector",
			Handler:    _DirectorService_DeleteDirector_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/movie.proto",
}

// ActorServiceClient is the client API for ActorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActorServiceClient interface {
	GetActors(ctx context.Context, in *GetActorsRequest, opts ...grpc.CallOption) (*GetActorsResponse, error)
	GetActor(ctx context.Context, in *GetActorRequest, opts ...grpc.CallOption) (*GetActorResponse, error)
	CreateActor(ctx context.Context, in *CreateActorRequest, opts ...grpc.CallOption) (*CreateActorResponse, error)
	UpdateDirector(ctx context.Context, in *UpdateActorRequest, opts ...grpc.CallOption) (*UpdateActorResponse, error)
	DeleteActor(ctx context.Context, in *DeleteActorRequest, opts ...grpc.CallOption) (*DeleteActorResponse, error)
}

type actorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActorServiceClient(cc grpc.ClientConnInterface) ActorServiceClient {
	return &actorServiceClient{cc}
}

func (c *actorServiceClient) GetActors(ctx context.Context, in *GetActorsRequest, opts ...grpc.CallOption) (*GetActorsResponse, error) {
	out := new(GetActorsResponse)
	err := c.cc.Invoke(ctx, "/ActorService/GetActors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) GetActor(ctx context.Context, in *GetActorRequest, opts ...grpc.CallOption) (*GetActorResponse, error) {
	out := new(GetActorResponse)
	err := c.cc.Invoke(ctx, "/ActorService/GetActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) CreateActor(ctx context.Context, in *CreateActorRequest, opts ...grpc.CallOption) (*CreateActorResponse, error) {
	out := new(CreateActorResponse)
	err := c.cc.Invoke(ctx, "/ActorService/CreateActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) UpdateDirector(ctx context.Context, in *UpdateActorRequest, opts ...grpc.CallOption) (*UpdateActorResponse, error) {
	out := new(UpdateActorResponse)
	err := c.cc.Invoke(ctx, "/ActorService/UpdateDirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actorServiceClient) DeleteActor(ctx context.Context, in *DeleteActorRequest, opts ...grpc.CallOption) (*DeleteActorResponse, error) {
	out := new(DeleteActorResponse)
	err := c.cc.Invoke(ctx, "/ActorService/DeleteActor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActorServiceServer is the server API for ActorService service.
// All implementations must embed UnimplementedActorServiceServer
// for forward compatibility
type ActorServiceServer interface {
	GetActors(context.Context, *GetActorsRequest) (*GetActorsResponse, error)
	GetActor(context.Context, *GetActorRequest) (*GetActorResponse, error)
	CreateActor(context.Context, *CreateActorRequest) (*CreateActorResponse, error)
	UpdateDirector(context.Context, *UpdateActorRequest) (*UpdateActorResponse, error)
	DeleteActor(context.Context, *DeleteActorRequest) (*DeleteActorResponse, error)
	mustEmbedUnimplementedActorServiceServer()
}

// UnimplementedActorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedActorServiceServer struct {
}

func (UnimplementedActorServiceServer) GetActors(context.Context, *GetActorsRequest) (*GetActorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActors not implemented")
}
func (UnimplementedActorServiceServer) GetActor(context.Context, *GetActorRequest) (*GetActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActor not implemented")
}
func (UnimplementedActorServiceServer) CreateActor(context.Context, *CreateActorRequest) (*CreateActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateActor not implemented")
}
func (UnimplementedActorServiceServer) UpdateDirector(context.Context, *UpdateActorRequest) (*UpdateActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDirector not implemented")
}
func (UnimplementedActorServiceServer) DeleteActor(context.Context, *DeleteActorRequest) (*DeleteActorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteActor not implemented")
}
func (UnimplementedActorServiceServer) mustEmbedUnimplementedActorServiceServer() {}

// UnsafeActorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActorServiceServer will
// result in compilation errors.
type UnsafeActorServiceServer interface {
	mustEmbedUnimplementedActorServiceServer()
}

func RegisterActorServiceServer(s grpc.ServiceRegistrar, srv ActorServiceServer) {
	s.RegisterService(&ActorService_ServiceDesc, srv)
}

func _ActorService_GetActors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).GetActors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActorService/GetActors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).GetActors(ctx, req.(*GetActorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_GetActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).GetActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActorService/GetActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).GetActor(ctx, req.(*GetActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_CreateActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).CreateActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActorService/CreateActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).CreateActor(ctx, req.(*CreateActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_UpdateDirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).UpdateDirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActorService/UpdateDirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).UpdateDirector(ctx, req.(*UpdateActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActorService_DeleteActor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteActorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActorServiceServer).DeleteActor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ActorService/DeleteActor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActorServiceServer).DeleteActor(ctx, req.(*DeleteActorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActorService_ServiceDesc is the grpc.ServiceDesc for ActorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ActorService",
	HandlerType: (*ActorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActors",
			Handler:    _ActorService_GetActors_Handler,
		},
		{
			MethodName: "GetActor",
			Handler:    _ActorService_GetActor_Handler,
		},
		{
			MethodName: "CreateActor",
			Handler:    _ActorService_CreateActor_Handler,
		},
		{
			MethodName: "UpdateDirector",
			Handler:    _ActorService_UpdateDirector_Handler,
		},
		{
			MethodName: "DeleteActor",
			Handler:    _ActorService_DeleteActor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/movie.proto",
}
